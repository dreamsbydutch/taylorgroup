{"version":3,"file":"createServerValidate.cjs","sources":["../../../src/start/createServerValidate.tsx"],"sourcesContent":["import { decode } from 'decode-formdata'\nimport { _tanstackInternalsCookie } from './utils'\nimport { ServerValidateError } from './error'\nimport type {\n  FormOptions,\n  FormValidationError,\n  ValidationError,\n  Validator,\n} from '@tanstack/form-core'\nimport type { FetchFn } from '@tanstack/start'\nimport type { ServerFormState } from './types'\n\ntype Ctx = Parameters<FetchFn<FormData, unknown>>[1]\n\ntype OnServerValidateFn<TFormData> = (props: {\n  value: TFormData\n}) => ValidationError | Promise<ValidationError>\n\ntype OnServerValidateOrFn<\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n> =\n  TFormValidator extends Validator<TFormData, infer FFN>\n    ? FFN | OnServerValidateFn<TFormData>\n    : OnServerValidateFn<TFormData>\n\ninterface CreateServerValidateOptions<\n  TFormData,\n  TFormValidator extends Validator<TFormData, unknown> | undefined = undefined,\n> extends FormOptions<TFormData, TFormValidator> {\n  onServerValidate: OnServerValidateOrFn<TFormData, TFormValidator>\n}\n\nconst isFormValidationError = (\n  error: unknown,\n): error is FormValidationError<unknown> => {\n  return typeof error === 'object'\n}\n\nexport const createServerValidate =\n  <\n    TFormData,\n    TFormValidator extends\n      | Validator<TFormData, unknown>\n      | undefined = undefined,\n  >(\n    defaultOpts: CreateServerValidateOptions<TFormData, TFormValidator>,\n  ) =>\n  async (ctx: Ctx, formData: FormData, info?: Parameters<typeof decode>[1]) => {\n    const { validatorAdapter, onServerValidate } = defaultOpts\n\n    const runValidator = async (propsValue: {\n      value: TFormData\n      validationSource: 'form'\n    }) => {\n      if (validatorAdapter && typeof onServerValidate !== 'function') {\n        return validatorAdapter().validateAsync(propsValue, onServerValidate)\n      }\n\n      return (onServerValidate as OnServerValidateFn<TFormData>)(propsValue)\n    }\n\n    const referer = ctx.request.headers.get('referer')!\n\n    const data = decode(formData, info) as never as TFormData\n\n    const onServerError = await runValidator({\n      value: data,\n      validationSource: 'form',\n    })\n\n    if (!onServerError) return\n\n    const onServerErrorStr =\n      onServerError &&\n      typeof onServerError !== 'string' &&\n      isFormValidationError(onServerError)\n        ? onServerError.form\n        : onServerError\n\n    const formState: ServerFormState<TFormData> = {\n      errorMap: {\n        onServer: onServerError,\n      },\n      values: data,\n      errors: onServerErrorStr ? [onServerErrorStr] : [],\n    }\n\n    const cookie = await _tanstackInternalsCookie.serialize(formState)\n\n    throw new ServerValidateError({\n      response: new Response('ok', {\n        headers: {\n          Location: referer,\n          'Set-Cookie': cookie,\n        },\n        status: 302,\n      }),\n      formState: formState,\n    })\n  }\n"],"names":["error","decode","_tanstackInternalsCookie","ServerValidateError"],"mappings":";;;;;AAiCA,MAAM,wBAAwB,CAC5BA,WAC0C;AAC1C,SAAO,OAAOA,WAAU;AAC1B;AAEO,MAAM,uBACX,CAME,gBAEF,OAAO,KAAU,UAAoB,SAAwC;AACrE,QAAA,EAAE,kBAAkB,iBAAA,IAAqB;AAEzC,QAAA,eAAe,OAAO,eAGtB;AACA,QAAA,oBAAoB,OAAO,qBAAqB,YAAY;AAC9D,aAAO,iBAAiB,EAAE,cAAc,YAAY,gBAAgB;AAAA,IAAA;AAGtE,WAAQ,iBAAmD,UAAU;AAAA,EACvE;AAEA,QAAM,UAAU,IAAI,QAAQ,QAAQ,IAAI,SAAS;AAE3C,QAAA,OAAOC,eAAAA,OAAO,UAAU,IAAI;AAE5B,QAAA,gBAAgB,MAAM,aAAa;AAAA,IACvC,OAAO;AAAA,IACP,kBAAkB;AAAA,EAAA,CACnB;AAED,MAAI,CAAC,cAAe;AAEd,QAAA,mBACJ,iBACA,OAAO,kBAAkB,YACzB,sBAAsB,aAAa,IAC/B,cAAc,OACd;AAEN,QAAM,YAAwC;AAAA,IAC5C,UAAU;AAAA,MACR,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ,mBAAmB,CAAC,gBAAgB,IAAI,CAAA;AAAA,EAClD;AAEA,QAAM,SAAS,MAAMC,+BAAyB,UAAU,SAAS;AAEjE,QAAM,IAAIC,MAAAA,oBAAoB;AAAA,IAC5B,UAAU,IAAI,SAAS,MAAM;AAAA,MAC3B,SAAS;AAAA,QACP,UAAU;AAAA,QACV,cAAc;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,IAAA,CACT;AAAA,IACD;AAAA,EAAA,CACD;AACH;;"}