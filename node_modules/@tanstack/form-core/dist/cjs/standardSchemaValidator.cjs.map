{"version":3,"file":"standardSchemaValidator.cjs","sources":["../../src/standardSchemaValidator.ts"],"sourcesContent":["import type {\n  ValidationError,\n  Validator,\n  ValidatorAdapterParams,\n} from './types'\n\ntype Params = ValidatorAdapterParams<StandardSchemaV1Issue>\ntype TransformFn = NonNullable<Params['transformErrors']>\n\nfunction prefixSchemaToErrors(\n  issues: readonly StandardSchemaV1Issue[],\n  transformErrors: TransformFn,\n) {\n  const schema = new Map<string, StandardSchemaV1Issue[]>()\n\n  for (const issue of issues) {\n    const path = [...(issue.path ?? [])]\n      .map((segment) => {\n        const normalizedSegment =\n          typeof segment === 'object' ? segment.key : segment\n        return typeof normalizedSegment === 'number'\n          ? `[${normalizedSegment}]`\n          : normalizedSegment\n      })\n      .join('.')\n      .replace(/\\.\\[/g, '[')\n\n    schema.set(path, (schema.get(path) ?? []).concat(issue))\n  }\n\n  const transformedSchema = {} as Record<string, ValidationError>\n\n  schema.forEach((value, key) => {\n    transformedSchema[key] = transformErrors(value)\n  })\n\n  return transformedSchema\n}\n\nfunction defaultFormTransformer(transformErrors: TransformFn) {\n  return (issues: readonly StandardSchemaV1Issue[]) => ({\n    form: transformErrors(issues as StandardSchemaV1Issue[]),\n    fields: prefixSchemaToErrors(issues, transformErrors),\n  })\n}\n\nexport const standardSchemaValidator =\n  (params: Params = {}): Validator<unknown, StandardSchemaV1<any>> =>\n  () => {\n    const transformFieldErrors =\n      params.transformErrors ??\n      ((issues: StandardSchemaV1Issue[]) =>\n        issues.map((issue) => issue.message).join(', '))\n\n    const getTransformStrategy = (validationSource: 'form' | 'field') =>\n      validationSource === 'form'\n        ? defaultFormTransformer(transformFieldErrors)\n        : transformFieldErrors\n\n    return {\n      validate({ value, validationSource }, fn) {\n        const result = fn['~standard'].validate(value)\n\n        if (result instanceof Promise) {\n          throw new Error('async function passed to sync validator')\n        }\n\n        if (!result.issues) return\n\n        const transformer = getTransformStrategy(validationSource)\n\n        return transformer(result.issues as StandardSchemaV1Issue[])\n      },\n      async validateAsync({ value, validationSource }, fn) {\n        const result = await fn['~standard'].validate(value)\n\n        if (!result.issues) return\n\n        const transformer = getTransformStrategy(validationSource)\n\n        return transformer(result.issues as StandardSchemaV1Issue[])\n      },\n    }\n  }\n\nexport const isStandardSchemaValidator = (\n  validator: unknown,\n): validator is StandardSchemaV1 =>\n  !!validator && '~standard' in (validator as object)\n\n/**\n * The Standard Schema interface.\n */\nexport type StandardSchemaV1<Input = unknown, Output = Input> = {\n  /**\n   * The Standard Schema properties.\n   */\n  readonly '~standard': StandardSchemaV1Props<Input, Output>\n}\n\n/**\n * The Standard Schema properties interface.\n */\ninterface StandardSchemaV1Props<Input = unknown, Output = Input> {\n  /**\n   * The version number of the standard.\n   */\n  readonly version: 1\n  /**\n   * The vendor name of the schema library.\n   */\n  readonly vendor: string\n  /**\n   * Validates unknown input values.\n   */\n  readonly validate: (\n    value: unknown,\n  ) => StandardSchemaV1Result<Output> | Promise<StandardSchemaV1Result<Output>>\n  /**\n   * Inferred types associated with the schema.\n   */\n  readonly types?: StandardSchemaV1Types<Input, Output> | undefined\n}\n/**\n * The result interface of the validate function.\n */\ntype StandardSchemaV1Result<Output> =\n  | StandardSchemaV1SuccessResult<Output>\n  | StandardSchemaV1FailureResult\n/**\n * The result interface if validation succeeds.\n */\ninterface StandardSchemaV1SuccessResult<Output> {\n  /**\n   * The typed output value.\n   */\n  readonly value: Output\n  /**\n   * The non-existent issues.\n   */\n  readonly issues?: undefined\n}\n/**\n * The result interface if validation fails.\n */\ninterface StandardSchemaV1FailureResult {\n  /**\n   * The issues of failed validation.\n   */\n  readonly issues: ReadonlyArray<StandardSchemaV1Issue>\n}\n/**\n * The issue interface of the failure output.\n */\ninterface StandardSchemaV1Issue {\n  /**\n   * The error message of the issue.\n   */\n  readonly message: string\n  /**\n   * The path of the issue, if any.\n   */\n  readonly path?:\n    | ReadonlyArray<PropertyKey | StandardSchemaV1PathSegment>\n    | undefined\n}\n/**\n * The path segment interface of the issue.\n */\ninterface StandardSchemaV1PathSegment {\n  /**\n   * The key representing a path segment.\n   */\n  readonly key: PropertyKey\n}\n/**\n * The Standard Schema types interface.\n */\ninterface StandardSchemaV1Types<Input = unknown, Output = Input> {\n  /**\n   * The input type of the schema.\n   */\n  readonly input: Input\n  /**\n   * The output type of the schema.\n   */\n  readonly output: Output\n}\n"],"names":[],"mappings":";;AASA,SAAS,qBACP,QACA,iBACA;AACM,QAAA,6BAAa,IAAqC;AAExD,aAAW,SAAS,QAAQ;AACpB,UAAA,OAAO,CAAC,GAAI,MAAM,QAAQ,CAAA,CAAG,EAChC,IAAI,CAAC,YAAY;AAChB,YAAM,oBACJ,OAAO,YAAY,WAAW,QAAQ,MAAM;AAC9C,aAAO,OAAO,sBAAsB,WAChC,IAAI,iBAAiB,MACrB;AAAA,IAAA,CACL,EACA,KAAK,GAAG,EACR,QAAQ,SAAS,GAAG;AAEhB,WAAA,IAAI,OAAO,OAAO,IAAI,IAAI,KAAK,CAAC,GAAG,OAAO,KAAK,CAAC;AAAA,EAAA;AAGzD,QAAM,oBAAoB,CAAC;AAEpB,SAAA,QAAQ,CAAC,OAAO,QAAQ;AACX,sBAAA,GAAG,IAAI,gBAAgB,KAAK;AAAA,EAAA,CAC/C;AAEM,SAAA;AACT;AAEA,SAAS,uBAAuB,iBAA8B;AAC5D,SAAO,CAAC,YAA8C;AAAA,IACpD,MAAM,gBAAgB,MAAiC;AAAA,IACvD,QAAQ,qBAAqB,QAAQ,eAAe;AAAA,EAAA;AAExD;AAEO,MAAM,0BACX,CAAC,SAAiB,CAAA,MAClB,MAAM;AACJ,QAAM,uBACJ,OAAO,oBACN,CAAC,WACA,OAAO,IAAI,CAAC,UAAU,MAAM,OAAO,EAAE,KAAK,IAAI;AAElD,QAAM,uBAAuB,CAAC,qBAC5B,qBAAqB,SACjB,uBAAuB,oBAAoB,IAC3C;AAEC,SAAA;AAAA,IACL,SAAS,EAAE,OAAO,iBAAA,GAAoB,IAAI;AACxC,YAAM,SAAS,GAAG,WAAW,EAAE,SAAS,KAAK;AAE7C,UAAI,kBAAkB,SAAS;AACvB,cAAA,IAAI,MAAM,yCAAyC;AAAA,MAAA;AAGvD,UAAA,CAAC,OAAO,OAAQ;AAEd,YAAA,cAAc,qBAAqB,gBAAgB;AAElD,aAAA,YAAY,OAAO,MAAiC;AAAA,IAC7D;AAAA,IACA,MAAM,cAAc,EAAE,OAAO,iBAAA,GAAoB,IAAI;AACnD,YAAM,SAAS,MAAM,GAAG,WAAW,EAAE,SAAS,KAAK;AAE/C,UAAA,CAAC,OAAO,OAAQ;AAEd,YAAA,cAAc,qBAAqB,gBAAgB;AAElD,aAAA,YAAY,OAAO,MAAiC;AAAA,IAAA;AAAA,EAE/D;AACF;AAEK,MAAM,4BAA4B,CACvC,cAEA,CAAC,CAAC,aAAa,eAAgB;;;"}