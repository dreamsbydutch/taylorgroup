import { FormApi, FormOptions, FormState, Validator } from '@tanstack/form-core';
import { ReactNode } from 'react';
import { FieldComponent } from './useField.cjs';
import { NoInfer } from '@tanstack/react-store';
/**
 * Fields that are added onto the `FormAPI` from `@tanstack/form-core` and returned from `useForm`
 */
export interface ReactFormApi<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> {
    /**
     * A React component to render form fields. With this, you can render and manage individual form fields.
     */
    Field: FieldComponent<TFormData, TFormValidator>;
    /**
     * A `Subscribe` function that allows you to listen and react to changes in the form's state. It's especially useful when you need to execute side effects or render specific components in response to state updates.
     */
    Subscribe: <TSelected = NoInfer<FormState<TFormData>>>(props: {
        selector?: (state: NoInfer<FormState<TFormData>>) => TSelected;
        children: ((state: NoInfer<TSelected>) => ReactNode) | ReactNode;
    }) => ReactNode;
}
/**
 * An extended version of the `FormApi` class that includes React-specific functionalities from `ReactFormApi`
 */
export type ReactFormExtendedApi<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined> = FormApi<TFormData, TFormValidator> & ReactFormApi<TFormData, TFormValidator>;
/**
 * A custom React Hook that returns an extended instance of the `FormApi` class.
 *
 * This API encapsulates all the necessary functionalities related to the form. It allows you to manage form state, handle submissions, and interact with form fields
 */
export declare function useForm<TFormData, TFormValidator extends Validator<TFormData, unknown> | undefined = undefined>(opts?: FormOptions<TFormData, TFormValidator>): ReactFormExtendedApi<TFormData, TFormValidator>;
