import { decode } from "decode-formdata";
import { _tanstackInternalsCookie } from "./utils.js";
import { ServerValidateError } from "./error.js";
const isFormValidationError = (error) => {
  return typeof error === "object";
};
const createServerValidate = (defaultOpts) => async (ctx, formData, info) => {
  const { validatorAdapter, onServerValidate } = defaultOpts;
  const runValidator = async (propsValue) => {
    if (validatorAdapter && typeof onServerValidate !== "function") {
      return validatorAdapter().validateAsync(propsValue, onServerValidate);
    }
    return onServerValidate(propsValue);
  };
  const referer = ctx.request.headers.get("referer");
  const data = decode(formData, info);
  const onServerError = await runValidator({
    value: data,
    validationSource: "form"
  });
  if (!onServerError) return;
  const onServerErrorStr = onServerError && typeof onServerError !== "string" && isFormValidationError(onServerError) ? onServerError.form : onServerError;
  const formState = {
    errorMap: {
      onServer: onServerError
    },
    values: data,
    errors: onServerErrorStr ? [onServerErrorStr] : []
  };
  const cookie = await _tanstackInternalsCookie.serialize(formState);
  throw new ServerValidateError({
    response: new Response("ok", {
      headers: {
        Location: referer,
        "Set-Cookie": cookie
      },
      status: 302
    }),
    formState
  });
};
export {
  createServerValidate
};
//# sourceMappingURL=createServerValidate.js.map
